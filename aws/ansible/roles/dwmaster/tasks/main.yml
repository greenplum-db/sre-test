---
# tasks file for dwmaster
- name: Disable SELinux
  selinux:
    state: disabled
  notify: Reboot host and wait for it to restart

- name: generate key pair
  become: yes
  become_user: "{{ greenplum.greenplum_admin_user }}"
  shell: ssh-keygen -t rsa -f /home/{{ greenplum.greenplum_admin_user }}/.ssh/id_rsa -q -N ""
  args:
    creates: /home/{{ greenplum.greenplum_admin_user }}/.ssh/id_rsa

- name: test public key
  shell: ssh-keygen -l -f /home/{{ greenplum.greenplum_admin_user }}/.ssh/id_rsa.pub
  changed_when: false

- name: retrieve public key
  shell: cat /home/{{ greenplum.greenplum_admin_user }}/.ssh/id_rsa.pub
  register: master_public_key
  changed_when: false

- name: Add public key to authorized_keys
  authorized_key:
    user: "{{ greenplum.greenplum_admin_user }}"
    state: present
    key: "{{ master_public_key.stdout }}"

- name: Copy PEM key to ansible host
  fetch:
    src: /home/{{ greenplum.greenplum_admin_user }}/.ssh/gp_prod.pem
    dest: files/gp_prod.pem
    flat: yes

- name: Copy private key to ansible host
  fetch:
    src: /home/{{ greenplum.greenplum_admin_user }}/.ssh/id_rsa
    dest: files/id_rsa
    flat: yes

- name: Copy public key to ansible host
  fetch:
    src: /home/{{ greenplum.greenplum_admin_user }}/.ssh/id_rsa.pub
    dest: files/id_rsa.pub
    flat: yes

- name: Copy authorzed_keys to ansible host
  fetch:
    src: /home/{{ greenplum.greenplum_admin_user }}/.ssh/authorized_keys
    dest: files/authorized_keys
    flat: yes

- name: Retrieve TanzuNet CLI
  get_url:
    url: https://github.com/pivotal-cf/pivnet-cli/releases/download/v2.0.1/pivnet-linux-amd64-2.0.1
    dest: /usr/local/bin/pivnet
    mode: '0555'

- name: Login into TanzuNet
  become: yes
  become_user: "{{ greenplum.greenplum_admin_user }}"
  shell: /usr/local/bin/pivnet login --api-token="{{ pivnet_api_token }}"
  args:
    creates: /root/.pivnetrc

- name: Create /home/{{ greenplum.greenplum_admin_user }}/pivnet_files directory
  become: yes
  become_user: "{{ greenplum.greenplum_admin_user }}"
  file:
    path: /home/{{ greenplum.greenplum_admin_user }}/pivnet_files
    state: directory
    owner: "{{ greenplum.greenplum_admin_user }}"
    group: "{{ greenplum.greenplum_admin_user }}"
    mode: '0777'

- name: Retrieve GPDB {{ greenplum.v6.pivnet_release_version }}
  become: yes
  become_user: "{{ greenplum.greenplum_admin_user }}"
  shell: >
    /usr/local/bin/pivnet
    download-product-files
    --product-slug="{{ greenplum.pivnet_product_slug }}"
    --release-version="{{ greenplum.v6.pivnet_release_version }}"
    --product-file-id="{{ greenplum.v6.pivnet_product_file_id }}"
    --download-dir=/home/{{ greenplum.greenplum_admin_user }}/pivnet_files
  args:
    creates: "/home/{{ greenplum.greenplum_admin_user }}/pivnet_files/greenplum-db-{{ greenplum.v6.pivnet_release_version }}-rhel7-x86_64.rpm"

#- name: Change the Owner and Group for greenplum package
#  file:
#    path: "/home/{{ greenplum.greenplum_admin_user }}/pivnet_files/greenplum-db-{{ greenplum.v6.pivnet_release_version }}-rhel7-x86_64.rpm"
#    state: file
#    owner: "{{ greenplum.greenplum_admin_user }}"
#    group: "{{ greenplum.greenplum_admin_user }}"
#    mode: '0777'


- name: Set GPDB nproc, nofile and core limits
  copy:
    src: "{{ role_path }}/files/gpdb-limits.conf"
    dest: /etc/security/limits.d

- name: Set GPDB sysctl.conf values
  notify: Reload systemctl
  copy:
    src: "{{ role_path }}/files/gpdb-sysctl.conf"
    dest: /etc/sysctl.conf

- name: Create core file directory if it does not exist
  file:
    path: /var/crash/cores
    state: directory
    mode: '0777'

- name: Install GPDB pivnet_files/greenplum-db-{{ greenplum.v6.pivnet_release_version }}-rhel7-x86_64.rpm
  yum:
    name: "/home/{{ greenplum.greenplum_admin_user }}/pivnet_files/greenplum-db-{{ greenplum.v6.pivnet_release_version }}-rhel7-x86_64.rpm"
    state: present

- name: Create .bashrc
  copy:
    src: "{{ role_path }}/files/.bashrc"
    dest: "/home/{{ greenplum.greenplum_admin_user }}/.bashrc"
    owner: "{{ greenplum.greenplum_admin_user }}"
    group: "{{ greenplum.greenplum_admin_user }}"
    mode: '0600'

- name: Set host
  hostname:
    name: "{{ inventory_hostname }}"

- name: Generate IPv4 gpinitsystem configuration file (gpinitsystem_config.ipv4)
  template:
    src: "{{ role_path }}/templates/gpinitsystem_config"
    dest: "/home/{{ greenplum.greenplum_admin_user }}/gpinitsystem_config.ipv4"
    owner: "{{ greenplum.greenplum_admin_user }}"
    group: "{{ greenplum.greenplum_admin_user }}"
  vars:
    ip_network_protocol: ipv4
  when: true

- name: Generate IPv6 gpinitsystem configuration file (gpinitsystem_config.ipv6)
  template:
    src: "{{ role_path }}/templates/gpinitsystem_config"
    dest: "/home/{{ greenplum.greenplum_admin_user }}/gpinitsystem_config.ipv6"
    owner: "{{ greenplum.greenplum_admin_user }}"
    group: "{{ greenplum.greenplum_admin_user }}"
  vars:
    ip_network_protocol: ipv6
  when: true

- name: Copy GP All hosts IPv4 (gp_all_hosts_ipv4)
  copy:
    src: files/gp_all_hosts_ipv4
    dest: /home/{{ greenplum.greenplum_admin_user }}/gp_all_hosts_ipv4
    owner: "{{ greenplum.greenplum_admin_user }}"
    group: "{{ greenplum.greenplum_admin_user }}"
    mode: '0600'

- name: Copy GP Segment hosts IPv4 (gp_segment_hosts_ipv4)
  copy:
    src: files/gp_segment_hosts_ipv4
    dest: /home/{{ greenplum.greenplum_admin_user }}/gp_segment_hosts_ipv4
    owner: "{{ greenplum.greenplum_admin_user }}"
    group: "{{ greenplum.greenplum_admin_user }}"
    mode: '0600'

- name: Copy GP All hosts IPv6 (gp_all_hosts_ipv6)
  copy:
    src: files/gp_all_hosts_ipv6
    dest: /home/{{ greenplum.greenplum_admin_user }}/gp_all_hosts_ipv6
    owner: "{{ greenplum.greenplum_admin_user }}"
    group: "{{ greenplum.greenplum_admin_user }}"
    mode: '0600'

- name: Copy GP Segment hosts IPv6 (gp_segment_hosts_ipv6)
  copy:
    src: files/gp_segment_hosts_ipv6
    dest: /home/{{ greenplum.greenplum_admin_user }}/gp_segment_hosts_ipv6
    owner: "{{ greenplum.greenplum_admin_user }}"
    group: "{{ greenplum.greenplum_admin_user }}"
    mode: '0600'

- name: Create XFS primary master/standbymaster partions
  community.general.parted:
    device: /dev/nvme1n1
    number: 1
    state: present
    fs_type: xfs

- name: Create XFS master/standbymaster filesystems
  community.general.filesystem:
    fstype: xfs
    opts: -L DATA1
    dev: /dev/nvme1n1

- name: Mount master/standbymaster filesystems by label
  ansible.posix.mount:
    path: /data1
    src: LABEL=DATA1
    fstype: xfs
    opts: rw,noatime,nobarrier,nodev,inode64,allocsize=16m
    state: mounted

- name: Make master/standbymaster filesystems world-writable
  file:
    path: /data1
    state: directory
    mode: '0777'

- name: Create master/standbymaster data directories
  file:
    path: /data1/gpdb/master
    state: directory
    mode: '0777'


